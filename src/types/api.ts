/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AppController_getHello"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AdminController_getProfile_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/update-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations["AdminController_updatePassword_v1"];
    trace?: never;
  };
  "/v1/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["UsersController_findAll_v1"];
    put?: never;
    post: operations["UsersController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["UsersController_findOne_v1"];
    put?: never;
    post?: never;
    delete: operations["UsersController_remove_v1"];
    options?: never;
    head?: never;
    patch: operations["UsersController_update_v1"];
    trace?: never;
  };
  "/v1/users/deactivate/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["UsersController_deactivate_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/reactivate/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations["UsersController_reactivateAll_v1"];
    trace?: never;
  };
  "/v1/users/reactivate/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations["UsersController_reactivate_v1"];
    trace?: never;
  };
  "/v1/users/generate-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["UsersController_generatePassword_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/send-new-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["UsersController_sendNewPassword_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/audit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuditController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login
     * @description Logs in to the system
     */
    post: operations["AuthController_login_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_logout_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/update-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_updatePassword_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/refresh-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["AuthController_refreshToken_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/seeds": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["SeedsController_initSeed_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/customers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["CustomersController_findAll_v1"];
    put?: never;
    post: operations["CustomersController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/customers/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["CustomersController_findOne_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations["CustomersController_update_v1"];
    trace?: never;
  };
  "/v1/customers/document/number/{documentNumber}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["CustomersController_findDocumentNumber_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/customers/remove/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["CustomersController_deactivate_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/customers/reactivate/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations["CustomersController_reactivateAll_v1"];
    trace?: never;
  };
  "/v1/rooms": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener todas las habitaciones */
    get: operations["RoomsController_findAll_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rooms/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener una habitación por ID */
    get: operations["RoomsController_findOne_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rooms/create-with-images": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Crear nueva habitación con imágenes */
    post: operations["RoomsController_createWithImages_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rooms/{id}/update-with-images": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Actualizar habitación con imágenes */
    patch: operations["RoomsController_updateWithImages_v1"];
    trace?: never;
  };
  "/v1/rooms/remove/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Desactivar múltiples habitaciones */
    delete: operations["RoomsController_deleteMany_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/rooms/reactivate/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Reactivar múltiples habitaciones */
    patch: operations["RoomsController_reactivateAll_v1"];
    trace?: never;
  };
  "/v1/rooms/{id}/with-images": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtener habitación con imágenes por ID */
    get: operations["RoomsController_findOneWithImages_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/reservation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all reservations */
    get: operations["ReservationController_findAll_v1"];
    put?: never;
    /** Create a new reservation */
    post: operations["ReservationController_create_v1"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/reservation/paginated": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get paginated reservations */
    get: operations["ReservationController_findAllPaginated_v1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/reservation/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a reservation by ID */
    get: operations["ReservationController_findOne_v1"];
    put?: never;
    post?: never;
    /** Delete a reservation */
    delete: operations["ReservationController_remove_v1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    UpdatePasswordDto: {
      password: string;
      newPassword: string;
      confirmPassword: string;
    };
    CreateUserDto: {
      name: string;
      email: string;
      password: string;
      phone?: string;
      /**
       * @description Rol that can be set to the user. Can only be ADMIN or RECEPCIONIST
       * @example ADMIN
       */
      userRol: string;
    };
    UpdateUserDto: {
      /** @description User name */
      name?: string;
      /** @description User phone */
      phone?: string;
      /**
       * @description Rol that can be set to the user. Can only be ADMIN or RECEPCIONIST
       * @example ADMIN
       */
      userRol?: string;
    };
    DeleteUsersDto: {
      ids: string[];
    };
    SendEmailDto: {
      email: string;
      password: string;
    };
    CreateAuditDto: {
      entityId: string;
      entityType: string;
      action: string;
      performedById: string;
      /** Format: date-time */
      createdAt: string;
    };
    LoginAuthDto: {
      /**
       * @description User email
       * @example admin@admin.com
       */
      email: string;
      /**
       * @description User password
       * @example admin
       */
      password: string;
    };
    CreateCustomerDto: {
      /** @description Nombre del cliente */
      name: string;
      /** @description Dirección del cliente */
      address: string;
      /** @description Lugar de nacimiento del cliente */
      birthPlace: string;
      /** @description País de residencia del cliente */
      country: string;
      /** @description Departamento de residencia del cliente */
      department?: string;
      /** @description Provincia de residencia del cliente */
      province?: string;
      /** @description Teléfono del cliente */
      phone: string;
      /** @description Ocupación del cliente */
      occupation: string;
      /**
       * @description Tipo de documento del cliente. Puede ser DNI, PASSPORT o FOREIGNER_CARD
       * @example DNI
       */
      documentType: string;
      /** @description Número de documento del cliente */
      documentNumber: string;
      /** @description Correo electrónico del cliente */
      email: string;
      /** @description Estado civil del cliente, puede ser SINGLE, MARRIED, DIVORCED o WIDOWED */
      maritalStatus: string;
      /** @description Nombre de la empresa */
      companyName: string;
      /** @description RUC de la empresa */
      ruc?: string;
      /** @description Dirección de la empresa */
      companyAddress?: string;
    };
    UpdateCustomerDto: {
      /** @description Nombre del cliente */
      name?: string;
      /** @description Dirección del cliente */
      address?: string;
      /** @description Lugar de nacimiento del cliente */
      birthPlace?: string;
      /** @description País de residencia del cliente */
      country?: string;
      /** @description Departamento de residencia del cliente */
      department?: string;
      /** @description Provincia de residencia del cliente */
      province?: string;
      /** @description Teléfono del cliente */
      phone?: string;
      /** @description Ocupación del cliente */
      occupation?: string;
      /**
       * @description Tipo de documento del cliente. Puede ser DNI, PASSPORT o FOREIGNER_CARD
       * @example DNI
       */
      documentType?: string;
      /** @description Número de documento del cliente */
      documentNumber?: string;
      /** @description Correo electrónico del cliente */
      email?: string;
      /** @description Estado civil del cliente, puede ser SINGLE, MARRIED, DIVORCED o WIDOWED */
      maritalStatus?: string;
      /** @description Nombre de la empresa */
      companyName?: string;
      /** @description RUC de la empresa */
      ruc?: string;
      /** @description Dirección de la empresa */
      companyAddress?: string;
    };
    DeleteCustomerDto: {
      ids: string[];
    };
    Room: {
      /**
       * @description Unique identifier for the entity
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id?: string;
      /**
       * @description Whether the room is active
       * @example true
       */
      isActive?: boolean;
      /**
       * Format: date-time
       * @description Timestamp when the entity was created
       * @example 2025-03-22T00:11:40.255Z
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description Timestamp when the entity was last updated
       * @example 2025-03-22T00:11:40.255Z
       */
      updatedAt?: string;
      /**
       * @description Room number
       * @example 101
       */
      number: number;
      /**
       * @description Maximum number of guests
       * @example 2
       */
      guests: number;
      /**
       * @description Type of room
       * @example SINGLE
       * @enum {string}
       */
      type: "SINGLE" | "DOUBLE_SINGLE" | "DOUBLE_FAMILY" | "SUITE" | "MATRIMONIAL";
      /**
       * @description Price per night
       * @example 99.99
       */
      price: number;
      /**
       * @description Current status of the room
       * @example AVAILABLE
       * @enum {string}
       */
      status: "AVAILABLE" | "OCCUPIED" | "RESERVED" | "CLEANING";
      /**
       * @description TV model or details
       * @example Samsung 50" Smart TV
       */
      tv: string;
      /**
       * @description Type of floor
       * @example CARPETING
       * @enum {string}
       */
      floorType: "LIMINATING" | "CARPETING";
      /**
       * @description Room description
       * @example Spacious room with ocean view
       */
      description: string;
      /**
       * @description Room area in square meters
       * @example 25
       */
      area: number;
    };
    DeleteRoomDto: {
      ids: string[];
    };
    BaseApiResponse: {
      /**
       * @description Estado de la operación
       * @example true
       */
      success: boolean;
      /**
       * @description Mensaje descriptivo
       * @example Operación realizada con éxito
       */
      message: string;
      /** @description Datos de la respuesta */
      data: Record<string, never> | null;
    };
    GuestDto: {
      /** @description Guest full name */
      name: string;
      /** @description Guest age */
      age?: number;
      /** @description Guest document identification */
      documentId?: string;
      /**
       * @description Type of document
       * @enum {string}
       */
      documentType?: "DNI" | "PASSPORT" | "FOREIGNER_CARD";
      /** @description Guest phone number */
      phone?: string;
      /** @description Guest email address */
      email?: string;
      /**
       * Format: date-time
       * @description Guest date of birth
       */
      birthDate?: string;
      /** @description Additional guest information */
      additionalInfo?: string;
    };
    CreateReservationDto: {
      /** @description Customer ID */
      customerId: string;
      /** @description Room ID */
      roomId: string;
      /** @description User ID of the person who creates the reservation */
      userId: string;
      /**
       * Format: date-time
       * @description Date when the reservation was made
       */
      reservationDate: string;
      /**
       * Format: date-time
       * @description Check-in date
       */
      checkInDate: string;
      /**
       * Format: date-time
       * @description Check-out date
       */
      checkOutDate: string;
      /**
       * @description Reservation status
       * @enum {string}
       */
      status: "PENDING" | "CHECKED_IN" | "CHECKED_OUT" | "CANCELED";
      /** @description Guest companions information */
      guests?: components["schemas"]["GuestDto"][];
      /** @description Additional observations */
      observations?: string;
    };
    Reservation: {
      /**
       * @description Unique identifier for the reservation
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id?: string;
      /**
       * @description Whether the reservation is active
       * @default true
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Timestamp when the reservation was created
       * @example 2025-03-22T00:11:40.255Z
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description Timestamp when the reservation was last updated
       * @example 2025-03-22T00:11:40.255Z
       */
      updatedAt?: string;
      /** @description Customer ID associated with the reservation */
      customerId: string;
      /** @description Room ID associated with the reservation */
      roomId: string;
      /** @description User ID of the staff who created the reservation */
      userId: string;
      /**
       * Format: date-time
       * @description Date when the reservation was made
       */
      reservationDate: string;
      /**
       * Format: date-time
       * @description Check-in date for the reservation
       */
      checkInDate: string;
      /**
       * Format: date-time
       * @description Check-out date for the reservation
       */
      checkOutDate: string;
      /**
       * @description Current status of the reservation
       * @enum {string}
       */
      status: "PENDING" | "CHECKED_IN" | "CHECKED_OUT" | "CANCELED";
      /** @description JSON list of companions/guests */
      guests?: string;
      /** @description Additional notes or observations */
      observations?: string;
    };
    DetailedReservation: {
      /**
       * @description Unique identifier for the reservation
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id?: string;
      /**
       * @description Whether the reservation is active
       * @default true
       * @example true
       */
      isActive: boolean;
      /**
       * Format: date-time
       * @description Timestamp when the reservation was created
       * @example 2025-03-22T00:11:40.255Z
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @description Timestamp when the reservation was last updated
       * @example 2025-03-22T00:11:40.255Z
       */
      updatedAt?: string;
      /** @description Customer ID associated with the reservation */
      customerId: string;
      /** @description Room ID associated with the reservation */
      roomId: string;
      /** @description User ID of the staff who created the reservation */
      userId: string;
      /**
       * Format: date-time
       * @description Date when the reservation was made
       */
      reservationDate: string;
      /**
       * Format: date-time
       * @description Check-in date for the reservation
       */
      checkInDate: string;
      /**
       * Format: date-time
       * @description Check-out date for the reservation
       */
      checkOutDate: string;
      /**
       * @description Current status of the reservation
       * @enum {string}
       */
      status: "PENDING" | "CHECKED_IN" | "CHECKED_OUT" | "CANCELED";
      /** @description JSON list of companions/guests */
      guests?: string;
      /** @description Additional notes or observations */
      observations?: string;
      /** @description Room associated with the reservation */
      room: components["schemas"]["Room"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AdminController_getProfile_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User profile */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AdminController_updatePassword_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePasswordDto"];
      };
    };
    responses: {
      /** @description Password updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findAll_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description User created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findOne_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get user by id */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_remove_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_update_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      /** @description User updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_deactivate_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteUsersDto"];
      };
    };
    responses: {
      /** @description Users deactivated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_reactivateAll_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteUsersDto"];
      };
    };
    responses: {
      /** @description Users reactivated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_reactivate_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User reactivated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_generatePassword_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get new password */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_sendNewPassword_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendEmailDto"];
      };
    };
    responses: {
      /** @description Send new password */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuditController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAuditDto"];
      };
    };
    responses: {
      /** @description Audit created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_login_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginAuthDto"];
      };
    };
    responses: {
      /** @description Login user */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_logout_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Logout user */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_updatePassword_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePasswordDto"];
      };
    };
    responses: {
      /** @description Update password */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_refreshToken_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Refresh token */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SeedsController_initSeed_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CustomersController_findAll_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Customers found successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CustomersController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCustomerDto"];
      };
    };
    responses: {
      /** @description Customer created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CustomersController_findOne_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Customer found successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CustomersController_update_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCustomerDto"];
      };
    };
    responses: {
      /** @description Customer updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CustomersController_findDocumentNumber_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        documentNumber: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Customer found successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CustomersController_deactivate_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteCustomerDto"];
      };
    };
    responses: {
      /** @description Customers deactivated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CustomersController_reactivateAll_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteCustomerDto"];
      };
    };
    responses: {
      /** @description Customers reactivated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RoomsController_findAll_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Lista de todas las habitaciones */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Room"][];
        };
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RoomsController_findOne_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Habitación encontrada */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Habitación no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RoomsController_createWithImages_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @example 101 */
          number: number;
          /** @example 2 */
          guests: number;
          /**
           * @example DOUBLE_SINGLE
           * @enum {string}
           */
          type: "SINGLE" | "DOUBLE_SINGLE" | "DOUBLE_FAMILY" | "SUITE" | "MATRIMONIAL";
          /** @example 150.5 */
          price: number;
          /**
           * @example AVAILABLE
           * @enum {string}
           */
          status: "AVAILABLE" | "OCCUPIED" | "RESERVED" | "CLEANING";
          /** @example Smart TV 42 pulgadas */
          tv: string;
          /**
           * @example LIMINATING
           * @enum {string}
           */
          floorType: "LIMINATING" | "CARPETING";
          /** @example Habitación con vista al mar */
          description: string;
          /** @example 25.5 */
          area: number;
          /** @description Imágenes de la habitación (opcional) */
          images?: string[];
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RoomsController_updateWithImages_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @example 101 */
          number?: number;
          /** @example 2 */
          guests?: number;
          /** @enum {string} */
          type?: "SINGLE" | "DOUBLE_SINGLE" | "DOUBLE_FAMILY" | "SUITE" | "MATRIMONIAL";
          /** @example 150.5 */
          price?: number;
          /** @enum {string} */
          status?: "AVAILABLE" | "OCCUPIED" | "RESERVED" | "CLEANING";
          /** @example Smart TV 42 pulgadas */
          tv?: string;
          /** @enum {string} */
          floorType?: "LIMINATING" | "CARPETING";
          /** @example Habitación con vista al mar */
          description?: string;
          /** @example 25.5 */
          area?: number;
          /** @description Nuevas imágenes para agregar (opcional) */
          newImages?: string[];
          /** @description Imágenes existentes a actualizar (opcional) */
          imageUpdates?: {
            /** @example 123e4567-e89b-12d3-a456-426614174000 */
            imageId?: string;
            /** Format: binary */
            file?: string;
          }[];
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RoomsController_deleteMany_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteRoomDto"];
      };
    };
    responses: {
      /** @description Habitaciones desactivadas exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
      /** @description IDs inválidos o habitaciones no existen */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RoomsController_reactivateAll_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteRoomDto"];
      };
    };
    responses: {
      /** @description Habitaciones reactivadas exitosamente */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BaseApiResponse"];
        };
      };
      /** @description IDs inválidos o habitaciones no existen */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  RoomsController_findOneWithImages_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Habitación encontrada con sus imágenes */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Room"];
        };
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Habitación no encontrada */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ReservationController_findAll_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of all reservations */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Reservation"][];
        };
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ReservationController_create_v1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReservationDto"];
      };
    };
    responses: {
      /** @description The created reservation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Reservation"];
        };
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ReservationController_findAllPaginated_v1: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Number of items per page */
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Paginated list of detailed reservations */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DetailedReservation"][];
        };
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ReservationController_findOne_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Reservation ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The found reservation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DetailedReservation"];
        };
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ReservationController_remove_v1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Reservation ID */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The reservation has been successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request - Error en la validación de datos o solicitud incorrecta */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - No autorizado para realizar esta operación */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
